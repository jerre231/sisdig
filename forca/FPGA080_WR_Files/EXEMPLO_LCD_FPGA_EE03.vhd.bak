ENTITY EXEMPLO_LCD_FPGA_EE03 IS
GENERIC (fclk: NATURAL := 20_000_000); --20MHz 
PORT (clk, rst: IN BIT; 
RS, RW: OUT BIT;
E: BUFFER BIT;-- can be OUT if an internai sigr.al is sreated 
DB: OUT BIT_VECTOR(7 DOWNTO 0)); 
END EXEMPLO_LCD;
ARCHITECTURE lcd_driver OF EXEMPLO_LCD_FPGA_EE03 IS
TYPE state IS (FunctionSetl, FunctionSet2, FunctionSet3,
 FunctionSet4,FunctionSet5,FunctionSet6,FunctionSet7,FunctionSet8,FunctionSet9,FunctionSet10,FunctionSet11,FunctionSet12,
 FunctionSet13,FunctionSet14,FunctionSet15,FunctionSet16,FunctionSet17,FunctionSet18,FunctionSet19,ClearDisplay, DisplayControl, EntryMode, 
 WriteDatal, WriteData2, WriteData3, WriteData4, WriteData5,WriteData6,WriteData7,WriteData8,WriteData9,WriteData10,WriteData11,
 WriteData12,WriteData13,WriteData14,WriteData15,WriteData16,WriteData17,WriteData18,WriteData19,SetAddress,SetAddress1, ReturnHome);
 SIGNAL pr_state, nx_state: state; 
 BEGIN
---—Clock generator (E->500Hz) :---------
PROCESS (clk)
VARIABLE count: NATURAL RANGE 0 TO fclk/1000; 
BEGIN
IF (clk' EVENT AND clk = '1') THEN 
	count := count + 1;
 IF (count=fclk/1000) THEN 
 E <= NOT E; 
 count := 0; 
 END IF; 
 END IF; 
 END PROCESS;
-----Lower section of FSM:---------------
PROCESS (E) 
BEGIN
	IF (E' EVENT AND E = '1') THEN 
	--	IF (rst= '0') THEN
		pr_state <= FunctionSetl; 
--ELSE
pr_state <= nx_state; 
--END IF; 
END IF; 
END PROCESS;
-----Upper section of FSX:---------------
PROCESS (pr_state) 
BEGIN
CASE pr_state IS


WHEN FunctionSetl => 
RS<= '0'; RW<= '0'; 
DB<= "00111000"; 
nx_state <= FunctionSet2; 
WHEN FunctionSet2 => 
RS<= '0'; RW<= '0'; 
DB <= "00111000";
nx_state <= FunctionSet3; 
WHEN FunctionSet3 => 
RS <= '0'; RW<='0'; 
DB <= "00111000"; 
nx_state <= FunctionSet4;

WHEN   FunctionSet4   =>
RS<=  '0'; RW<=  '0';
DB   <=   "00111000";
nx_state <= FunctionSet5;

WHEN   FunctionSet5   =>
RS<=  '0'; RW<=  '0';
DB   <=   "00111000";
nx_state <= FunctionSet6;

WHEN   FunctionSet6   =>
RS<=  '0'; RW<=  '0';
DB   <=   "00111000";
nx_state <= FunctionSet7;

WHEN   FunctionSet7   =>
RS<=  '0'; RW<=  '0';
DB   <=   "00111000";
nx_state <= FunctionSet8;

WHEN   FunctionSet8   =>
RS<=  '0'; RW<=  '0';
DB   <=   "00111000";
nx_state <= FunctionSet9;

WHEN   FunctionSet9   =>
RS<=  '0'; RW<=  '0';
DB   <=   "00111000";
nx_state <= FunctionSet10;

WHEN   FunctionSet10   =>
RS<=  '0'; RW<=  '0';
DB   <=   "00111000";
nx_state <= FunctionSet11;

WHEN   FunctionSet11   =>
RS<=  '0'; RW<=  '0';
DB   <=   "00111000";
nx_state <= FunctionSet12;

WHEN   FunctionSet12   =>
RS<=  '0'; RW<=  '0';
DB   <=   "00111000";
nx_state <= FunctionSet13;

WHEN   FunctionSet13   =>
RS<=  '0'; RW<=  '0';
DB   <=   "00111000";
nx_state <= FunctionSet14;

WHEN   FunctionSet14   =>
RS<=  '0'; RW<=  '0';
DB   <=   "00111000";
nx_state <= FunctionSet15;

WHEN   FunctionSet15   =>
RS<=  '0'; RW<=  '0';
DB   <=   "00111000";
nx_state <= FunctionSet16;

WHEN   FunctionSet16   =>
RS<=  '0'; RW<=  '0';
DB   <=   "00111000";
nx_state <= FunctionSet17;

WHEN   FunctionSet17   =>
RS<=  '0'; RW<=  '0';
DB   <=   "00111000";
nx_state <= FunctionSet18;

WHEN   FunctionSet18   =>
RS<=  '0'; RW<=  '0';
DB   <=   "00111000";
nx_state <= FunctionSet19;


WHEN   FunctionSet19   =>
RS<=  '0'; RW<=  '0';
DB   <=   "00111000";
nx_state <= ClearDisplay ;



WHEN ClearDisplay =>
RS<= '0'; RW<= '0';
DB <= "00000001";
nx_state   <=   DisplayControl; 
WHEN   DisplayControl   =>
RS<= '0';   RW<=  '0';
DB   <=  "00001100";
nx_state <= EntryMode; 
WHEN EntryMode =>
RS<= '0'; RW<= '0';
DB <= "00000110";
nx_state   <=  WriteDatal; 

WHEN  WriteDatal =>
RS<=   '1';   RW <='0';
DB   <=   "00100000";   --'ESCREVE UM ESPAÇO EM BRANDO
nx_state <= SetAddress1; 

WHEN SetAddress1 =>
RS<=   '0';   RW<=   '0';
DB   <=  "10000100";   --COMANDO PARA POSICIONAR O CURSOR NA LINHA 0 COLUNA 5
nx_state  <= WriteData2; 

WHEN WriteData2 =>
RS<= '1'; RW<= '0';
DB <= "01000101"; --'E'
nx_state <= WriteData3; 
WHEN WriteData3 =>
RS<= '1'; RW<= '0';
DB <= "01001101"; --'M'
nx_state  <= WriteData4; 
WHEN  WriteData4   =>
RS<=   '1';   RW<=   '0';
DB   <=  "01000101";   --'E'
nx_state  <= WriteData5; 

WHEN  WriteData5   =>
RS<=   '1';   RW<=   '0';
DB   <=  "01010010";   --'R'
nx_state  <= WriteData6;

WHEN  WriteData6   =>
RS<=   '1';   RW<=   '0';
DB   <=  "01010011";   --'S'
nx_state  <= WriteData7;

WHEN  WriteData7   =>
RS<=   '1';   RW<=   '0';
DB   <=  "01001111";   --'O'
nx_state  <= WriteData8;

WHEN  WriteData8   =>
RS<=   '1';   RW<=   '0';
DB   <=  "01001110";   --'N'
nx_state  <= SetAddress;

WHEN SetAddress =>

RS<=   '0';   RW<=   '0';
DB   <=  "11000010";   --COMANDO PARA POSICIONAR O CURSOR NA LINHA 1 COLUNA 3
nx_state  <= WriteData9; 

WHEN WriteData9 =>
RS<= '1'; RW<= '0';
DB <= "01000101"; --'E'
nx_state <= WriteData10; 

WHEN WriteData10 =>
RS<= '1'; RW<= '0';
DB <= "01001100"; --'L'
nx_state <= WriteData11; 


WHEN WriteData11 =>
RS<= '1'; RW<= '0';
DB <= "01000101"; --'E'
nx_state <= WriteData12;

WHEN WriteData12 =>
RS<= '1'; RW<= '0';
DB <= "01010100"; --'T'
nx_state <= WriteData13;

WHEN WriteData13 =>
RS<= '1'; RW<= '0';
DB <= "01010010"; --'R'
nx_state <= WriteData14;

WHEN WriteData14 =>
RS<= '1'; RW<= '0';
DB <= "01001111"; --'O'
nx_state <= WriteData15;

WHEN WriteData15 =>
RS<= '1'; RW<= '0';
DB <= "01001110"; --'N'
nx_state <= WriteData16;

WHEN WriteData16 =>
RS<= '1'; RW<= '0';
DB <= "01001001"; --'I'
nx_state <= WriteData17;

WHEN WriteData17 =>
RS<= '1'; RW<= '0';
DB <= "01000011"; --'C'
nx_state <= WriteData18;

WHEN WriteData18 =>
RS<= '1'; RW<= '0';
DB <= "01001111"; --'O'
nx_state <= WriteData19;


WHEN WriteData19 =>
RS<= '1'; RW<= '0';
DB <= "01010011"; --'S'
nx_state <= ReturnHome; 



WHEN   ReturnHome   =>
RS<=   '0';   RW<=  '0';
DB   <=  "10000000";
nx_state <= WriteDatal; 
END CASE; 
END PROCESS; 
END lcd_driver;
